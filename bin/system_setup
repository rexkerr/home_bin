#!/usr/bin/env bash

# Set up a few common folders
mkdir -p ~/gitroot
mkdir -p ~/.config
mkdir -p ~/.gdb

# Install some general tools that I use
sudo apt install    \
    acpi            \
    apcalc          \
    aptitude        \
    bzip2           \
    caffeine        \
    curl            \
    eject           \
    exuberant-ctags \
    firefox         \
    gimp            \
    gnome-terminal  \
    imagemagick     \
    keepassx        \
    mplayer         \
    passwd          \
    screen          \
    taskwarrior     \
    tmux            \
    tree            \
    vifm            \
    wget            \
    xclip           \
    xdotool         \
    zeal

# Install development tools
sudo apt install     \
    build-essential  \
    cmake            \
    cmake-curses-gui \
    cmake-qt-gui     \
    meld             \
    valgrind

# Install and configure version control tools
sudo apt install \
    git          \ 
    gitg         \ 
    qgit         \
    tig   

git config --global user.name Rex Kerr
read -p "What is your git email address?  " GIT_EMAIL_INPUT
git config --global user.email $GIT_EMAIL_INPUT

# Install and configure the i3 Window Manager & various tools my config file references
sudo apt install i3 i3-wm i3lock xbacklight xautolock suckless-tools dmenu scrot
pushd ~/gitroot
git clone https://github.com/rexkerr/i3config.git
popd
ln -s ~/gitroot/i3config/i3/ ~/.config/i3
ln -s ~/gitroot/i3config/i3status/ ~/.config/i3status

# Fix folder handling .desktop file for Nautilus
cp /usr/share/applications/nautilus-folder-handler.desktop ~/.local/share/applications/
cp /usr/share/applications/nautilus.desktop ~/.local/share/applications/
sed -i ~/.local/share/applications/nautilus*.desktop -e "s/--new-window/& --no-desktop/"

# Install and configure XMonad
sudo apt install xmonad xmobar dmenu
#
# TODO
#


# Install and configure vim
sudo apt install vim-gtk
pushd ~/gitroot
git clone https://github.com/rexkerr/vimrc.git
popd
ln -s ~/gitroot/vimrc/.vimrc ~/.vimrc
ln -s ~/gitroot/vimrc/.gvimrc ~/.gvimrc

# Download vim plugins that I use
mkdir ~/.vim/bundle
pushd ~/.vim/bundle
git clone git://github.com/tpope/vim-abolish.git
git clone git://github.com/vim-scripts/Align.git
git clone https://github.com/kien/ctrlp.vim.git
git clone git://github.com/tpope/vim-vinegar.git
popd


# Create empty default project config for vim
mkdir -p ~/.vimprojects
touch ~/.vimprojects/default.vim

# Install and configure Beyond Compare
read -p "Download Beyond Compare to the Downloads folder, press enter to continue..."
pushd ~/Downloads
wget http://www.scootersoftware.com/bcompare-4.2.9.23626_amd64.deb
sudo dpkg --install bcompare*.deb
rm bcompare*.deb
popd
git config --global diff.tool=bc3
git config --global difftool.bc3=trustExitCode
git config --global merge.tool=bc3
git config --global mergetool.bc3=trustExitCode
git config --global push.default=simple

# Get Qt pretty printers for gdb
pushd ~/.gdb
git clone git clone https://github.com/Lekensteyn/qt5printers.git
popd

echo >> ~/.gdbinput2 <<GDBINIT
python
import sys, os.path, gdb

sys.path.insert(0, os.path.expanduser('~/.gdb'))
import qt5printers
qt5printers.register_printers(gdb.current_objfile())

sys.path.insert(0, os.path.expanduser('~/.gdb/python'))
from libstdcxx.v6.printers import register_libstdcxx_printers
register_libstdcxx_printers (gdb.current_objfile())
end

define connect
    target remote localhost:12345
end


python
class ListGTests(gdb.Command):
  """ Lists all Google Test functions """

  def __init__ (self):
    super(ListGTests, self).__init__("listgtests", gdb.COMMAND_USER)

  def invoke (self, name, from_tty):
    print( name)
    gdb.execute('info func TestBody')

ListGTests()

class GTBreakpoint(gdb.Command):
  """ Creates breakpoints in test bodies of Google Test functions matching regex """

  def __init__ (self):
    super(GTBreakpoint, self).__init__("breakgtest", gdb.COMMAND_USER)

  def invoke (self, name, from_tty):
    if not name:
       print("usage:  breakgtest <testname regex>")
       return

    regexp = "%s.*TestBody" % name
    gdb.execute('rbreak {:s}'.format(regexp))

GTBreakpoint()
end

alias bgt=breakgtest
alias lgt=listgtests

set print thread-events off

skip QString::~QString
skip EventLogger::GetInstance()

tui enable

GDBINIT


# Append my config to the end of .profile & .bashrc
#
# TODO
#

# Set up my .inputrc
#
cat >> ~/.inputrc <<INPUTRC
set editing-mode vi
set show-mode-in-prompt on
INPUTRC

# Install & configure liquidprompt
#
# TODO
#

# Install & configure my various useful scripts
#
# TODO
#

