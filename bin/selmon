#!/usr/bin/env python3
import enum
import subprocess
import sys
import shutil

INFO = ("[ \033[30;1mINFO\033[0m ] ", "INFO")
WARNING = ("[ \033[33;1mWARNING\033[0m ] ", "WARNING")
ERROR = ("[ \033[31;1mERROR\033[0m ] ", "ERROR")

internal_monitor = "DP-2"

class Resolution(enum.Enum):
    isNative = 0
    is720 = 1
    is1080 = 2


def notify(heading, message, osd = True):
    print(heading[0] + message)

    if osd and shutil.which("notify-send"):
        command = ["notify-send"]
        command.append(heading[1])
        command.append(message)
        subprocess.call(command)


def connected_monitors():
    output = [l for l in subprocess.check_output(["xrandr"]).decode("utf-8").splitlines()]
    return [l.split()[0] for l in output if " connected " in l]


def disconnected_monitors():
    output = [l for l in subprocess.check_output(["xrandr"]).decode("utf-8").splitlines()]
    return [l.split()[0] for l in output if " disconnected " in l]


def set_monitors(on, off, resolution, side=None):
    command = ["xrandr"]
    for m in on:
        command.append("--output")
        command.append(m)
        if m == on[0]:
            command.append("--primary")

        if m != internal_monitor:
            if side in ("left", "l"):
                command.append("--left-of")
                command.append(internal_monitor)
            elif side in ("right", "r"):
                command.append("--right-of")
                command.append(internal_monitor)

        if resolution == Resolution.is720:
            command.append("--mode")
            command.append("1280x720")
        elif resolution == Resolution.is1080:
            command.append("--mode")
            command.append("1920x1080")
        else:
            command.append("--auto")

    for m in off:
        command.append("--output")
        command.append(m)
        command.append("--off")

    notify(INFO, "command:  " + " ".join(command), False)
    subprocess.call(command)


# first turn off any disconnected monitors
set_monitors([], disconnected_monitors(), False)

allmonitors = connected_monitors()
external_monitors = [m for m in allmonitors if m != internal_monitor]
desired_monitor = sys.argv[1] if (len(sys.argv) > 1) else ""

resolution = Resolution.isNative

if(len(sys.argv) > 2):
    if (sys.argv[2] == "720"): resolution = Resolution.is720
    elif (sys.argv[2] == "1080"): resolution = Resolution.is1080

if internal_monitor not in allmonitors:
    notify(WARNING, "The internal_monitor variable needs to be updated")
    sys.exit()

if desired_monitor in ("both", "all", "b", "a", "mirror", "m"):
    # force to 1080 since the internal monitor is 1080
    resolution = Resolution.is1080

    # first disable external monitors to clear any left-of or right-of settings
    set_monitors([internal_monitor], external_monitors, resolution)

    # now select all monitors
    set_monitors(allmonitors, [], resolution)

elif desired_monitor in ("left", "l", "right", "r"):
    set_monitors(allmonitors, [], resolution, desired_monitor)

elif desired_monitor in ("int", "internal", "i"):
    set_monitors([internal_monitor], external_monitors, resolution)

elif desired_monitor in ("ext", "external", "e"):
    if not external_monitors:
        notify(ERROR, "There is no external monitor connected.")
        sys.exit()

    set_monitors(external_monitors, [internal_monitor], resolution)

else:
    notify(ERROR, "unknown monitor requested")
    print("")
    print("Usage:")
    print("   " + sys.argv[0] +" [type]")
    print("")

