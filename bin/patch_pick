#!/usr/bin/env bash 

# This script is for cherry-picking between branches when files have moved
#
# Usage:
#     patch_pick SOURCE_SHA FILE_IN_SOURCE_BRANCH [TARGET_FILE]
#
#            If no TARGET_FILE specified, it's assumed that the path is the
#            same as the source branch.  Either way, if the target file cannot
#            be found, an attempt to find a file with the given name will be made.
#
#  If the merge fails, any hunks that could not be applied will be saved in a
#  TARGET_FILE.rej file to be manually applied.
# 
#  I generaly get a list of files that were changed in the source commit, as follows:
#
#      git show --name-only SHA
#

SHA=$1
ORIGFILE=$2
TARGETFILE=$2

if [[ $# -eq 3 ]]; then
    TARGETFILE=$3
fi

if [ ! -f "$TARGETFILE" ]; then
    echo "Could not find $TARGETFILE"

    TARGETFILE=$(find . -iname `basename $TARGETFILE`)

    echo "Use $TARGETFILE instead?"

    read -n 1 CONTINUE

    if [ "$CONTINUE" == "n" ] || [ "$CONTINUE" == "N" ]; then 
        echo 
        echo Cancelling integration...
        echo
        exit 1
    fi
fi

echo About to patch from:
echo      sha:  $SHA
echo      src:  $ORIGFILE
echo   target:  $TARGETFILE
echo 

git diff $SHA~1..$SHA -- $ORIGFILE | patch $TARGETFILE

if [ $? -eq 0 ]; then
    git add $TARGETFILE

    echo "************************************"
    echo "       SUCCESSFULLY MERGED          "
    echo "************************************"
else
    echo "************************************"
    echo "ERROR:  Conflicts, fix them first..."
    echo "************************************"
fi


